<?php

declare(strict_types=1);

namespace App\Shared\Domain\Model;

use App\Shared\Exception\InvalidCollectionParameterException;
use ArrayObject as BaseArrayObject;
use Iterator;
use OpenApi\Annotations as OA;

/**
 * @template T
 * @extends BaseArrayObject<int, T>
 */
abstract class ArrayObject extends BaseArrayObject
{
    /**
     * @var string
     */
    protected string $collectionClassType;

    /**
     * @return class-string<T>
     */
    public function getCollectionClassType(): string
    {
        return $this->collectionClassType;
    }

    /**
     * @OA\Property(type="")
     * @return array<T>
     */
    public function getArrayCopy(): array
    {
        return parent::getArrayCopy(); // TODO: Change the autogenerated stub
    }

    /**
     * @OA\Property(type="")
     * @return Iterator
     */
    public function getIterator(): Iterator
    {
        return parent::getIterator(); // TODO: Change the autogenerated stub
    }


    /**
     * Enforce collection type
     * @param T $value
     * @return void
     * @throws InvalidCollectionParameterException
     */
    public function append(mixed $value): void
    {
        if (!($value instanceof $this->collectionClassType)) {
            // Object
            if (is_object($value)) {
                $type = get_class($value);
            } // Scalar type
            else {
                $type = gettype($value);
            }
            throw new InvalidCollectionParameterException($type, $this->collectionClassType);
        }
        parent::append($value);
    }
}
